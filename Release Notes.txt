Iterator Actor
v2.2.0
- The Iterator Actor now inherits from Async Actors, this allows removing the Actor Core method and all the event refnums used to communicate with it and replacing it with an Async method that will send the iteration commands. The "Start Iteration" method then just starts such Async method (Closes #1)
- Added an internal flag, called "Iterating" indicating that the iterator is running. If the flag is true and we start an iteration we should do nothing. If we try to stop an Iterator that is not running we should do nothing. See #2
v2.1.0
- solved a bug whereby if the iteration would last more than the iteration period the Stop Reason would be erroneously reported as "Stopped Externally"
- completely refactored the code to introduce an alternative method to acknowledge the completion of one iteration. Now we have an abstract iterator implementing the base functionality, then the "Iterator Actor" implements the standard method whereby we use messages with a reply. The other concrete class "Iterator Actor NG" requires the caller to explicitly send an "Notify Iteration" message to notify the Iterator that the iteration is complete. This operation can then be automated by creating iteration messages as subclasses of the "Abstract Iteration Message" thus resulting into a functioning similar to that of the iteration actor but without the mechanism of a message with a reply. On the other hand if we use just normal caller messages the user will have to explicitly send a "Notify Iteration" message to move to the next iteration
v2.0.0
- we now define better the reason for the stop and return it
- we now define the stop conditions as cluster of Boolean instead of an enum. this allows us to stop fro multiple conditions (to be implemented)
